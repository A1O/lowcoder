import React, { createContext, useContext, useState, useEffect } from 'react';
import { getI18nObjects, Translator } from "lowcoder-core";
import * as localeData from "./locales";
import { I18nObjects } from "./locales/types";

// Define the context type to include the translation functions
interface LanguageContextType {
  trans: (key: string) => string;
  transToNode: (key: string) => React.ReactNode;
  language: string;
  changeLanguage: (newLanguage: string) => void;
}

const defaultLanguageContext: LanguageContextType = {
  trans: (key: string) => key, // default function that returns the key
  transToNode: (key: string) => <>{key}</>, // default function that returns the key wrapped in a fragment
  language: 'en',
  changeLanguage: () => {} // empty function for initialization
};

const LanguageContext = createContext<LanguageContextType>(defaultLanguageContext);

export const LanguageProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [language, setLanguage] = useState('en');
  const [translator, setTranslator] = useState(new Translator<typeof localeData.en>(localeData, language, ["en"]));

  useEffect(() => {
    setTranslator(new Translator<typeof localeData.en>(localeData, language, ["en"]));
  }, [language]);

  const changeLanguage = (newLanguage: string) => {
    setLanguage(newLanguage);
  };

  const value = {
    trans: translator.trans,
    transToNode: translator.transToNode,
    language,
    changeLanguage
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => useContext(LanguageContext);
export const useTrans = () => useContext(LanguageContext).trans;
export const useTransToNode = () => useContext(LanguageContext).transToNode;
